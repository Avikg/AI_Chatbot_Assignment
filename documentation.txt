PDF Question Answering System: Documentation


Overview
This system is a PDF-based question-answering application that extracts text from a PDF file, processes the content into smaller chunks, creates embeddings for efficient text similarity, and uses pre-trained models to answer user queries. A graphical user interface (GUI) built with `PySimpleGUI` simplifies interactions.


Features
1. PDF File Loading:
   - Users can select and load a PDF file.
   - Text is extracted and split into manageable chunks for processing.
   - Displays a success message after loading the file.

2. Question Answering:
   - Users input a question, and the system retrieves relevant text chunks.
   - A pre-trained `transformers` QA model processes the chunks to generate answers.

3. Results Display:
   - Best answer, page number, and confidence score are displayed in the GUI.

4. Error Handling:
   - Handles missing files, empty questions, and processing errors gracefully with user-friendly messages.


System Components

1. PDF Text Extraction
- Library: pdfplumber
- Functionality:
  - Extracts text from each page of the PDF.
  - Splits text into smaller chunks by paragraphs (`\n\n`) for efficient processing.

2. Embedding Model
- Library: sentence-transformers
- Model: all-MiniLM-L6-v2
- Functionality:
  - Encodes extracted text chunks into numerical vectors (embeddings).
  - Encodes user questions into embeddings to compute similarity.

3. Question-Answering Model
- Library: transformers
- Model: distilbert-base-cased-distilled-squad
- Functionality:
  - Extracts the most relevant text snippet for answering a question.
  - Scores and ranks answers by confidence.

4. Similarity Computation
- Library: sklearn
- Metric: Cosine Similarity
- Functionality:
  - Compares question embeddings with chunk embeddings.
  - Selects the top 5 most similar chunks.

5. GUI
- Library: PySimpleGUI
- Functionality:
  - Allows users to:
    - Select a PDF file.
    - Input a question.
    - View answers, page numbers, and confidence scores.
  - Handles errors like missing files or questions.

---

Code Structure

1. Main Components
|   Function                      |   Purpose                                                                             |
|---------------------------------|---------------------------------------------------------------------------------------|
| extract_text_from_pdf(file_path)| Extracts text from all pages of a given PDF file.                                     |
| prepare_embeddings(pdf_chunks)  | Creates embeddings for text chunks using the `sentence-transformers` model.           |
| retrieve_relevant_chunks(...)   | Finds the most relevant chunks for a user question using cosine similarity.           |
| get_answers(...)                | Uses the QA model to generate answers from the most relevant chunks.                  |
| main_gui()                      | Implements the GUI logic for file selection, question answering, and results display. |

2. GUI Layout
|   Component                          |  Description                                                                    |
|--------------------------------------|---------------------------------------------------------------------------------|
| File Selector                        | Allows users to select a PDF file for processing.                               |
| Question Input                       | Input field for user queries.                                                   |
| Buttons (Load PDF, Get Answer, Exit) | Triggers PDF loading, question answering, and application exit.                 |
| Answer Display                       | Displays the best answer, page number, and confidence score.                    |



Step-by-Step Workflow

1. Load a PDF File
- The user selects a file using the file selector in the GUI.
- The `Load PDF` button triggers:
  - `extract_text_from_pdf`: Extracts and processes text from the PDF.
  - `prepare_embeddings`: Creates embeddings for text chunks.

2. Ask a Question
- The user enters a question in the input field.
- The `Get Answer` button triggers:
  - `retrieve_relevant_chunks`: Retrieves the top 5 most relevant chunks based on cosine similarity.
  - `get_answers`: Uses the QA model to generate and rank answers.

3. Display Results
- The best answer is displayed in the GUI along with:
  - Page number of the chunk containing the answer.
  - Confidence score of the modelâ€™s prediction.

4. Handle Errors
- Missing file:
  - Prompts the user to select a file before processing.
- Empty question:
  - Displays an error message asking for a valid question.
- Processing errors:
  - Catches exceptions and displays error messages in the GUI.


Required Libraries
|   Library                |  Installation Command                    |
|--------------------------|------------------------------------------|
| PySimpleGUI              | pip install PySimpleGUI                  |
| pdfplumber               | pip install pdfplumber                   |
| sentence-transformers    | pip install sentence-transformers        |
| transformers             | pip install transformers                 |
| scikit-learn             | pip install scikit-learn                 |
| numpy                    | pip install numpy                        |



System Requirements
- Python Version : 3.7 or higher.
- Additional Requirements:
  - Ensure the PDF file is text-based (scanned PDFs with images require OCR preprocessing).


Usage Instructions

1. Run the Application:
   bash: python model.py
   

2. Load a PDF:
   - Click Browse to select a PDF file and click Load PDF.
   - A success message confirms the file is processed.

3. Ask a Question:
   - Enter your question in the input field.
   - Click **Get Answer** to retrieve the best result.

4. View Results:
   - The answer, page number, and confidence score are displayed in the GUI.

5. Exit:
   - Click Exit to close the application.

---

Example Workflow

1. Load PDF:
   - Selected file: `example.pdf`.
   - Output: "PDF Loaded Successfully!"

2. Ask Question:
   - Question: "What is the company's revenue?"
   - Output:
     Answer: $10 million
     Page: 3
     Confidence: 0.89


Error Handling
|   Error Type             |  Cause                              | Resolution                                  |
|--------------------------|-------------------------------------|---------------------------------------------|
| File Not Loaded          | PDF file not selected.              | Prompt to load a valid file before querying |
| Empty Question           | Question input field is empty.      | Prompt to enter a valid question.           |
| Processing Error         | Issues during chunk processing.     | Display the error details in a popup.       |


Limitations
1. Text-based PDFs Only:
   - Scanned PDFs are not supported without OCR preprocessing.
2. Accuracy:
   - Dependent on the quality of the QA model and extracted text.
3. Performance:
   - Large PDFs may increase processing time.


Future Enhancements
1. OCR Integration:
   - Add support for scanned PDFs using tools like `Tesseract`.
2. Multi-language Support: 
   - Extend to support PDFs in languages other than English.
3. Advanced GUI Features:
   - Add progress bars and real-time updates during processing.
